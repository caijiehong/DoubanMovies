// Generated by CoffeeScript 1.6.3
(function() {
  var Mongoda, doubanMovie, doubanUser, settings, _import;

  _import = require('../import/import');

  Mongoda = require('../models/mongoda');

  settings = require('../settings');

  doubanUser = require('../models/doubanUser');

  doubanMovie = require('../models/doubanMovie');

  exports.index = {
    get: function(req, res) {
      return doubanUser.top(25, function(results) {
        return res.render('index', {
          doubanKey: settings.doubanAPIKey,
          topList: results
        });
      });
    }
  };

  exports.upload = {
    post: function(req, res) {
      var col, data;
      col = req.body['col'];
      data = req.body['data'];
      data = JSON.parse(data);
      _import.insertData(col, data);
      return res.send('1');
    }
  };

  exports.findone = {
    get: function(req, res) {
      return (new Mongoda(settings.dbUrl)).open(function(err, db) {
        var col;
        col = db.collection(req.param('col'));
        return col.findOne({}, function(err, item) {
          return res.send(item);
        });
      });
    }
  };

  exports.user = {
    get: function(req, res, douban_user_id) {
      return doubanUser.top(25, function(results) {
        return res.render('index', {
          doubanKey: settings.doubanAPIKey,
          domain: settings.domain,
          douban_user_id: douban_user_id,
          douban_user_name: douban_user_id,
          topList: results
        });
      });
    },
    post: function(req, res, douban_user_id) {
      return doubanUser.data(douban_user_id, function(userData) {
        return res.send(userData);
      });
    }
  };

  exports.update = {
    post: function(req, res, douban_user_id) {
      var status;
      status = doubanUser.update(douban_user_id);
      return res.send('success');
    }
  };

  exports.loadusers = {
    get: function(req, res) {
      var da;
      da = new Mongoda(settings.dbUrl);
      da.open(function(err, db) {
        var cur, douUsers, users;
        users = da.collection('users');
        douUsers = {};
        cur = users.find();
        return cur.toArray(function(err, list) {
          var collection, item, key, movie, userArray, value, _i, _len;
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            item = list[_i];
            movie = {
              rate: item.rate,
              date: item.date,
              id: item.id
            };
            if (douUsers[item.user]) {
              douUsers[item.user].movies.push(movie);
            } else {
              douUsers[item.user] = {
                userId: item.user,
                userName: item.user,
                movies: [movie]
              };
            }
          }
          for (key in douUsers) {
            value = douUsers[key];
            value.totalWatch = value.movies.length;
          }
          userArray = (function() {
            var _results;
            _results = [];
            for (key in douUsers) {
              value = douUsers[key];
              _results.push(value);
            }
            return _results;
          })();
          collection = db.collection('douUsers');
          return collection.insert(userArray, function(err, res) {
            db.close();
            if (err) {
              return console.error(err);
            }
          });
        });
      });
      return res.send('success');
    }
  };

  exports.removemovie = {
    get: function(req, res) {
      var da;
      da = new Mongoda(settings.dbUrl);
      da.open(function(err, db) {
        var movies,
          _this = this;
        movies = db.collection('movies');
        return movies.group(['id'], {}, {
          count: 0
        }, (function(obj, prev) {
          return prev.count++;
        }), false, function(err1, result1) {
          var array, item;
          db.close();
          if (err1) {
            console.error(err1);
            return;
          }
          array = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = result1.length; _i < _len; _i++) {
              item = result1[_i];
              if (item.count > 1) {
                _results.push(item.id);
              }
            }
            return _results;
          })();
          return movies.remove({
            id: {
              $in: array
            }
          }, function(err, result) {
            return console.log(result);
          });
        });
      });
      return res.send('success');
    }
  };

  exports.frontpage = {
    get: function(req, res) {
      doubanMovie.readFrontPage();
      return res.send('success');
    }
  };

}).call(this);
